-- npm init
     initialize new server
     {
        "name": "mern-chatapp-socketio",
        "version": "1.0.0",
        "description": "learn MERN with locser",
        "main": "server.js",
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1"
        },
        "author": "locser",
        "license": "ISC"
    }
- npm install express
    install express
- create server.js (/backend/server.js)
- npm install nodemon
- npx create-react-app frontend 
    tạo react app tên frontend
    Lệnh trên sẽ tạo một ứng dụng React mới với tên my-app, mà không cần cài đặt create-react-app trước đó. npx sẽ tự động tải gói create-react-app từ npm, thực thi nó và sau đó xóa gói đó khỏi hệ thống của bạn.

    Lợi ích của việc sử dụng npx là bạn không cần phải quản lý các gói cục bộ và không gây xung đột giữa các phiên bản của các gói khác nhau. Nó cũng cho phép bạn chạy các phiên bản mới nhất của các gói mà không cần cập nhật thủ công.

- cd frontend 
- npm start
      Local:            http://localhost:3000

- chakra ui
- add proxy server http://127.0.0.1:3001

-npm i axios

-- //TODO: asyncHandler

- npm i bcrypt
- npm uninstall bcrypt
- npm i bcryptjs
- npm i jsonwebtoken

- //TODO: 

    //FIXME: Cloudinary là một dịch vụ quản lý hình ảnh và video dựa trên đám mây. Nó cung cấp các tính năng mạnh mẽ để tải lên, lưu trữ, xử lý và phục vụ hình ảnh và video trên ứng dụng web và di động.

    Cloudinary giúp đơn giản hóa việc quản lý tài nguyên đa phương tiện bằng cách cung cấp các API dễ sử dụng và các tính năng như xử lý hình ảnh (cắt, điều chỉnh kích thước, xoay, làm mờ, v.v.), xử lý video (cắt, nén, chuyển đổi định dạng, v.v.), tạo các phiên bản hình ảnh với chất lượng và kích thước khác nhau, tự động tạo ảnh xác định môi trường (responsive), giao diện phục vụ tối ưu tốc độ, và nhiều tính năng khác.

    Với Cloudinary, bạn có thể tải lên các tệp hình ảnh và video từ máy chủ hoặc từ các nguồn khác như URL hoặc thiết bị người dùng, lưu trữ an toàn và quản lý các tệp đó trên đám mây. Bạn cũng có thể tích hợp Cloudinary vào ứng dụng web hoặc di động của mình để hiển thị và phục vụ hình ảnh và video cho người dùng.

    Cloudinary cung cấp cả phiên bản miễn phí và phiên bản trả phí với các gói dịch vụ mở rộng và tính năng cao cấp.

    Sử dụng Cloudinary, bạn có thể giảm thiểu công việc phát triển, tăng tốc độ tải trang, tiết kiệm không gian lưu trữ và tăng trải nghiệm người dùng khi làm việc với hình ảnh và video trên ứng dụng của mình.

-  đăng nhập Cloudinary, cài đặt vào cài đặt -  account -  edit product         enviroment để biết các thông tin về Cloud.
    lấy API URL 

- npm install cloudinary
- npm install cors
- cdn font awesome 5: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.1/css/all.min.css" integrity="sha512-xA6Hp6oezhjd6LiLZynuukm80f8BoZ3OpcEYaqKoCV3HKQDrYjDE1Gu8ocxgxoXmwmSzM4iqPvCsOkQNiu41GA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

TODO: fix search user.

- Cannot set headers after they are sent to the client
     Lỗi "Cannot set headers after they are sent to the client" thường xảy ra khi bạn cố gắng thiết lập tiêu đề (headers) sau khi đã gửi phản hồi (response) cho client. Trong trường hợp của bạn, có vẻ như mỗi lần người dùng thay đổi giá trị trong input, bạn lại gọi xử lý hàm và gửi yêu cầu đến API để lấy dữ liệu. Việc này dẫn đến việc gửi nhiều yêu cầu cùng một lúc và gây xung đột trong việc thiết lập tiêu đề.

     Để giải quyết vấn đề này, bạn có thể sử dụng một số kỹ thuật sau:

Debouncing: Sử dụng debounce để chờ một khoảng thời gian nhất định sau khi người dùng thay đổi giá trị trong input trước khi gọi xử lý hàm. Debouncing giúp chỉ gọi xử lý hàm sau khi ngừng nhận thêm yêu cầu trong khoảng thời gian đã định trước.

Throttling: Sử dụng throttling để giới hạn số lượng yêu cầu gửi đến API trong một khoảng thời gian nhất định. Throttling đảm bảo rằng chỉ có một số lượng xác định yêu cầu được gửi đi trong một khoảng thời gian nhất định, ngay cả khi có nhiều yêu cầu được gửi đến.

Caching: Lưu trữ kết quả từ yêu cầu trước đó và sử dụng kết quả đã lưu để trả về cho người dùng mà không cần gửi yêu cầu mới đến API. Điều này giúp giảm số lượng yêu cầu gửi đi và giảm thiểu việc thiết lập tiêu đề lặp lại.

Tùy thuộc vào yêu cầu và môi trường ứng dụng của bạn, bạn có thể lựa chọn kỹ thuật phù hợp để tối ưu hóa yêu cầu và giảm thiểu việc thiết lập tiêu đề quá nhiều lần.

- What is debouncing and throttling TODO:
    https://www.developerway.com/posts/debouncing-in-react

- TODO: nâng cao 
:Thay vì gọi hàm handleSearch ngay khi người dùng nhập vào input, bạn có thể sử dụng debounce hoặc throttle để giới hạn số lần gọi hàm. Điều này giúp tránh việc gọi liên tục khi người dùng nhập nhanh, tối ưu hóa hiệu suất.

Sử dụng try-catch block để bắt và xử lý các lỗi trong quá trình gọi API. Bạn đã thực hiện điều này trong mã của bạn, nhưng bạn có thể xem xét thêm việc xử lý các trường hợp lỗi cụ thể và hiển thị thông báo lỗi phù hợp cho người dùng.

Tích hợp chức năng tìm kiếm tự động (autocomplete) khi người dùng nhập vào input. Bạn có thể sử dụng một thư viện autocomplete hoặc triển khai chức năng này bằng cách gửi các yêu cầu tìm kiếm bổ sung khi người dùng nhập.

Xem xét việc tối ưu hóa và tăng tốc độ xử lý của API tìm kiếm để đảm bảo rằng việc truy vấn và trả về kết quả diễn ra một cách nhanh chóng và hiệu quả.

- Đây là trang chính thức của MongoDB về phương thức populate trong Mongoose:

    https://mongoosejs.com/docs/populate.html

    Trang này cung cấp hướng dẫn chi tiết và ví dụ về cách sử dụng populate để nạp thông tin từ các mô hình liên quan trong MongoDB.

    Ngoài ra, đây là một số tài liệu và bài viết khác liên quan đến việc sử dụng populate trong Mongoose:

    Hy vọng những tài liệu này sẽ giúp bạn hiểu rõ hơn về cách sử dụng populate trong MongoDB và Mongoose.

- cd .\frontend\
- npm i  react-scrollable-feed
- TODO: scrollable-feed
